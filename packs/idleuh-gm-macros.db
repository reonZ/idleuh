{"name":"GM Flat Check Roll","type":"chat","author":"mdv0NOLsITdkCYRq","img":"icons/svg/d20.svg","scope":"global","command":"/br 1d20#flat-check roll","flags":{"core":{"sourceId":"Macro.ftF53S9V8oJCl9Xb"}},"_stats":{"systemId":"pf2e","systemVersion":"4.3.4","coreVersion":"10.290","createdTime":1668390682898,"modifiedTime":1668460003973,"lastModifiedBy":"eYRcJxNtWBHDBCJ8"},"folder":null,"sort":0,"ownership":{"default":0,"mdv0NOLsITdkCYRq":3},"_id":"73zjtxhN5f7rVokB"}
{"name":"Lockpicking","type":"script","author":"mdv0NOLsITdkCYRq","img":"icons/svg/padlock.svg","scope":"global","command":"const actor = canvas.tokens.controlled[0]?.actor\n\nconst presets = new Collection([\n    ['poor', { name: 'poor', dc: 15, nb: 2 }],\n    ['simple', { name: 'simple', dc: 20, nb: 3 }],\n    ['average', { name: 'average', dc: 25, nb: 4 }],\n    ['good', { name: 'good', dc: 30, nb: 5 }],\n    ['superior', { name: 'superior', dc: 40, nb: 6 }],\n])\n\nfunction lockpicking($html) {\n    const { dc, nb } = $html\n        .find('.lockpicking')\n        .serializeArray()\n        .reduce((acc, curr) => {\n            acc[curr.name] = curr.value\n            return acc\n        }, {})\n\n    console.log(dc, nb)\n\n    let content = 'A lockpicking action is required'\n    if (actor) content += ` from <strong>${actor.name}</strong>`\n    content += ` <a class=\"inline-chat\" data-dc=\"${dc}\" data-nb=\"${nb}\" data-actor=\"${actor?.id ?? ''}\">/lockpicking</a>`\n\n    ChatMessage.create({ content })\n}\n\nfunction onPresetChange(event, $html) {\n    const { dc, nb } = presets.get(event.currentTarget.value)\n    $html.find('input[name=\"dc\"]').val(dc)\n    $html.find('input[name=\"nb\"]').val(nb)\n}\n\nfunction onDialogRender($html) {\n    $html.find('.presets').on('change', event => onPresetChange(event, $html))\n}\n\nnew Dialog(\n    {\n        title: 'Lockpicking',\n        buttons: {\n            yes: {\n                icon: '<i class=\"fas fa-dice-d20\"></i>',\n                label: 'Send',\n                callback: lockpicking,\n            },\n        },\n        render: onDialogRender,\n        content: `<form class=\"lockpicking\">\n    <label style=\"width: fit-content; margin: auto; display: flex; align-items: center; gap: .3em;\">\n        <strong style=\"white-space: nowrap;\">Presets</strong>\n        <select class=\"presets\">\n            ${presets.map(x => `<option value=\"${x.name}\">DC ${x.dc} / ${x.nb} successes</option>`).join('')}\n        </select>\n    </label>\n    <hr>\n    <label style=\"width: fit-content; margin: auto; display: flex; align-items: center; gap: .3em;\">\n        <strong style=\"white-space: nowrap; width: 100px; text-align: end;\">Difficulty Check</strong> \n        <input style=\"width: 30px;\" type=\"number\" name=\"dc\" min=\"15\" max=\"40\" value=\"${presets.get('poor').dc}\">\n    </label>\n    <label style=\"width: fit-content; margin: auto auto 10px; display: flex; align-items: center; gap: .3em;\">\n        <strong style=\"white-space: nowrap; width: 100px; text-align: end;\"># of Successes</strong> \n        <input style=\"width: 30px;\" type=\"number\" name=\"nb\" min=\"1\" max=\"10\" value=\"${presets.get('poor').nb}\">\n    </label>\n<form>`,\n    },\n    {\n        width: 240,\n    }\n).render(true)","flags":{"advanced-macros":{"runAsGM":false},"core":{"sourceId":"Macro.Gv4J9CsuFJcGJmUS"}},"_stats":{"systemId":"pf2e","systemVersion":"4.3.4","coreVersion":"10.290","createdTime":1666878525068,"modifiedTime":1668460036917,"lastModifiedBy":"eYRcJxNtWBHDBCJ8"},"folder":null,"sort":0,"ownership":{"default":0,"mdv0NOLsITdkCYRq":3},"_id":"JLqmzH5IBwxfplbC"}
{"name":"Identify","type":"script","author":"mdv0NOLsITdkCYRq","img":"systems/pf2e/icons/equipment/adventuring-gear/magnifying-glass.webp","scope":"global","command":"/** @typedef {foundry.data.ItemData} ItemData */\n/** @typedef {'incredibly easy'|'very easy'|'easy'|'normal'} NegativeDCAdjustment */\n/** @typedef {'normal'|'hard'|'very hard'|'incredibly hard'} PositiveDCAdjustment */\n/** @typedef {NegativeDCAdjustment|PositiveDCAdjustment} DCAdjustment */\n\nconst localize = game.i18n.localize.bind(game.i18n)\nconst notMatchingTraditionModifier = /** @type {number} */ (\n    game.settings.get('pf2e', 'identifyMagicNotMatchingTraditionModifier')\n)\nconst proficiencyWithoutLevel = game.settings.get('pf2e', 'proficiencyVariant') === 'ProficiencyWithoutLevel'\n\nconst RARITIES = ['common', 'uncommon', 'rare', 'unique']\n\n/** @typedef {typeof RARITIES[number]} Rarity */\n\n/** @type {Map<number, number>} */\nconst dcByLevel = new Map([\n    [-1, 13],\n    [0, 14],\n    [1, 15],\n    [2, 16],\n    [3, 18],\n    [4, 19],\n    [5, 20],\n    [6, 22],\n    [7, 23],\n    [8, 24],\n    [9, 26],\n    [10, 27],\n    [11, 28],\n    [12, 30],\n    [13, 31],\n    [14, 32],\n    [15, 34],\n    [16, 35],\n    [17, 36],\n    [18, 38],\n    [19, 39],\n    [20, 40],\n    [21, 42],\n    [22, 44],\n    [23, 46],\n    [24, 48],\n    [25, 50],\n])\n\nconst MAGIC_TRADITIONS = ['arcane', 'primal', 'divine', 'occult']\n\n/** @typedef {typeof MAGIC_TRADITIONS[number]} MagicTradition */\n\n/** @type {Set<string>} */\nconst magicTraditions = new Set(MAGIC_TRADITIONS)\n\n/** @type {Map<DCAdjustment, number>} */\nconst dcAdjustments = new Map([\n    ['incredibly easy', -10],\n    ['very easy', -5],\n    ['easy', -2],\n    ['normal', 0],\n    ['hard', 2],\n    ['very hard', 5],\n    ['incredibly hard', 10],\n])\n\n/** @type {Item[]} */\nconst items = game.actors.reduce((acc, actor) => {\n    if (actor.hasPlayerOwner) acc.push(...actor.items.filter(item => item.isIdentified === false))\n    return acc\n}, /** @type {Item[]} */ ([]))\n\n// @ts-ignore\nconst buttons = {\n    ok: {\n        icon: '<i class=\"fas fa-times\"></i>',\n        label: 'Close',\n    },\n}\n\nfunction getContent() {\n    let content = `\n    <div style=\"text-align: center; margin-bottom: 4px;\">\n        <input type=\"radio\" name=\"remove\" value=\"remove\">\n        <label style=\"margin-right: 4px;\">Remove from list</label>\n        <input type=\"radio\" name=\"remove\" value=\"recheck\" checked>\n        <label>Remove for the day</label>\n        <a data-type=\"reset\" style=\"margin-left: 10px;\" title=\"Reset Day\"><i class=\"fas fa-redo-alt\"></i></a>\n    </div>\n    <div class=\"flexcol\" style=\"margin-bottom: 8px;\">\n    `\n\n    for (let i = 0; i < items.length; i++) {\n        const item = items[i]\n        if (item.getFlag('world', 'identify.checked')) continue\n        const identified = item.system.identification.identified\n        content += `\n    <div data-type=\"item\" class=\"flexrow\" style=\"padding: 4px 6px; border-radius: 2px; align-items: center; gap: 4px;\" \n            onmouseover=\"this.style.backgroundColor='#0000001f';\" \n            onmouseout=\"this.style.backgroundColor='transparent';\"> \n        <div class=\"flex0\" \n        style=\"background: center / contain no-repeat url(${\n            identified.img\n        }); padding: 12px; box-shadow: inset 0 0 0 1px var(--tertiary);\"></div>\n        <div>${item.type === 'treasure' ? '($) ' : ''}${identified.name}</div>\n        <div style=\"display: flex; flex-grow: 0; gap: 6px; font-size: 20px;\">\n            <a title=\"Post skill checks\" data-type=\"checks\" data-index=\"${i}\"><i class=\"fas fa-dice-d20\"></i></a>\n            <a title=\"Identify Item\" data-type=\"identify\" data-index=\"${i}\"><i class=\"fas fa-question-circle\"></i></a>\n            <a title=\"Remove from list\" data-type=\"remove\" data-index=\"${i}\"><i class=\"fas fa-trash\"></i></a>\n        </div>\n    </div>\n    `\n    }\n\n    content += '</div>'\n\n    return content\n}\n\n/**\n *\n * @param {Rarity} rarity\n * @returns {PositiveDCAdjustment}\n */\nfunction rarityToDCAdjustment(rarity = 'common') {\n    if (rarity === 'uncommon') return 'hard'\n    else if (rarity === 'rare') return 'very hard'\n    else if (rarity === 'unique') return 'incredibly hard'\n    else return 'normal'\n}\n\n/**\n * @param {number} dc\n * @param {DCAdjustment} adjustment\n * @returns number\n */\nfunction adjustDC(dc, adjustment = 'normal') {\n    return dc + (dcAdjustments.get(adjustment) ?? 0)\n}\n\n/**\n * @param {number} dc\n * @param {Rarity} rarity\n * @returns number\n */\nfunction adjustDCByRarity(dc, rarity = 'common') {\n    return adjustDC(dc, rarityToDCAdjustment(rarity))\n}\n\n/**\n * @param {number} level\n * @param {Rarity} [rarity]\n * @returns\n */\nfunction getDc(level, rarity = 'common') {\n    const dc = dcByLevel.get(level) ?? 14\n    if (proficiencyWithoutLevel) return adjustDCByRarity(dc - Math.max(level, 0), rarity)\n    else return adjustDCByRarity(dc, rarity)\n}\n\n/**\n * @param {Item} item\n * @returns {Set<string>}\n */\nfunction getTraits(item) {\n    return new Set(item.system.traits.value)\n}\n\n/**\n * @param {Item} item\n * @returns {boolean}\n */\nfunction isCursed(item) {\n    return getTraits(item).has('cursed')\n}\n\n/**\n * @param {Item} item\n * @returns {Rarity}\n */\nfunction getDcRarity(item) {\n    if (isCursed(item)) return 'unique'\n    else return item.system.traits.rarity?.value ?? 'common'\n}\n\n/**\n * @param {Item} item\n * @returns {Set<MagicTradition>}\n */\nfunction getMagicTraditions(item) {\n    const traits = getTraits(item)\n    return new Set([...traits].filter(trait => magicTraditions.has(trait)))\n}\n\n/**\n * @param {string} skill\n * @param {number} value\n */\nfunction templateData(skill, value) {\n    return {\n        /** @type {string} */\n        name: localize(`PF2E.${skill}`),\n        get shortForm() {\n            return this.name.toLowerCase().slice(0, 3)\n        },\n        dc: value,\n    }\n}\n\n/**\n * @param {Item} item\n * @param {number} baseDc\n */\nfunction identifyMagic(item, baseDc) {\n    const result = {\n        occult: baseDc,\n        primal: baseDc,\n        divine: baseDc,\n        arcane: baseDc,\n    }\n    const traditions = getMagicTraditions(item)\n    for (const key of MAGIC_TRADITIONS) {\n        if (traditions.size > 0 && !traditions.has(key)) {\n            result[key] = baseDc + notMatchingTraditionModifier\n        }\n    }\n    return [\n        templateData('SkillArcana', result.arcane),\n        templateData('SkillNature', result.primal),\n        templateData('SkillOccultism', result.occult),\n        templateData('SkillReligion', result.divine),\n    ]\n}\n\n/**\n * @param {Item} item\n */\nfunction identifyItem(item) {\n    const dc = getDc(item.level)\n    const rarity = getDcRarity(item)\n    const baseDc = adjustDCByRarity(dc, rarity)\n    if (item.isMagical) return identifyMagic(item, baseDc)\n    else return [templateData('SkillCrafting', baseDc)]\n}\n\n/**\n * @param {JQuery.TriggeredEvent<any, any, HTMLAnchorElement>} event\n */\nasync function postChecks(event) {\n    const index = event.currentTarget.dataset.index\n    const item = items[index]\n    const skills = identifyItem(item)\n    const itemImg = item.system.identification.unidentified.img\n    const itemName = item.system.identification.unidentified.name\n    const identifiedName = item.system.identification.identified.name\n\n    const content = await renderTemplate('systems/pf2e/templates/actors/identify-item-chat-skill-checks.html', {\n        itemImg,\n        itemName,\n        identifiedName,\n        skills,\n    })\n\n    ChatMessage.create({ user: game.user.id, content })\n}\n\n/**\n * @param {JQuery.TriggeredEvent<any, any, HTMLAnchorElement>} event\n */\nasync function identify(event) {\n    const item = items[event.currentTarget.dataset.index]\n    await item.setIdentificationStatus('identified')\n    await item.toChat()\n    await remove(event, true)\n}\n\n// @ts-ignore\nlet dialog\nfunction createDialog() {\n    dialog = new Dialog({\n        title: 'Identify Items',\n        content: getContent(),\n        buttons,\n        render: onRender,\n    })\n    dialog.render(true)\n}\n\n/**\n * @param {JQuery.TriggeredEvent<any, any, HTMLAnchorElement>} event\n * @param {boolean} [noRecheck]\n */\nasync function remove(event, noRecheck) {\n    const target = event.currentTarget\n    if (!noRecheck) {\n        const remove = event.delegateTarget.querySelector('[name=\"remove\"]:checked').value\n        if (remove === 'recheck') {\n            const index = target.dataset.index\n            const item = items[index]\n            await item.setFlag('world', 'identify.checked', true)\n        }\n    }\n    target.closest('[data-type=\"item\"]').remove()\n}\n\nasync function reset() {\n    const confirm = await Dialog.confirm({\n        title: 'Reset Day',\n        content: 'All the items that were removed for the day will appear once again in the list.',\n        defaultYes: true,\n    })\n    if (!confirm) return\n    for (const item of items) await item.setFlag('world', 'identify.checked', false)\n    dialog?.close()\n    createDialog()\n}\n\n/**\n * @param {JQuery} $html\n */\nfunction onRender($html) {\n    $html.filter('.dialog-buttons').css('flex-grow', 0)\n    $html.on('click', '[data-type=\"checks\"]', postChecks)\n    $html.on('click', '[data-type=\"identify\"]', identify)\n    $html.on('click', '[data-type=\"remove\"]', remove)\n    $html.on('click', '[data-type=\"reset\"]', reset)\n}\n\ncreateDialog()","flags":{"advanced-macros":{"runAsGM":false},"core":{"sourceId":"Macro.Sn3ySNsZ47vndQ2x"}},"_stats":{"systemId":"pf2e","systemVersion":"4.3.4","coreVersion":"10.290","createdTime":1668390684608,"modifiedTime":1668460028265,"lastModifiedBy":"eYRcJxNtWBHDBCJ8"},"folder":null,"sort":0,"ownership":{"default":0,"mdv0NOLsITdkCYRq":3},"_id":"bGZgEg0Q3WnSCQAu"}
{"name":"Group Perception","type":"script","author":"mdv0NOLsITdkCYRq","img":"systems/pf2e/icons/spells/vision-of-weakness.webp","scope":"global","command":"/**\n * @param {number} rank\n */\nfunction skillRankToProficiency(rank) {\n    switch (rank) {\n        case 1:\n            return 'trained'\n        case 2:\n            return 'expert'\n        case 3:\n            return 'master'\n        case 4:\n            return 'legendary'\n        default:\n            return 'untrained'\n    }\n}\n\n/** @param {Token} token */\nfunction rollPerception(token) {\n    const perception = token.actor.attributes.perception\n    const mod = perception.value\n    const rank = skillRankToProficiency(perception.rank)\n    const roll = new Roll('1d20 + @mod', { mod }).evaluate({ async: false })\n    const die = roll.dice[0].total\n    let result = `<div style=\"display:flex;justify-content:space-between;\"><span>${token.actor.name} (${rank})</span><span`\n    if (die == 20) result += ' style=\"color: green;\"'\n    else if (die == 1) result += ' style=\"color: red;\"'\n    return `${result}>${roll.total}</span></div>`\n}\n\nfunction groupPerception() {\n    let result = '<hr>'\n    canvas.tokens.placeables.filter(x => x.actor?.hasPlayerOwner).forEach(token => (result += rollPerception(token)))\n    ChatMessage.create({ content: result, flavor: 'Group Perception Checks', whisper: [game.user.id] })\n}\n\ngroupPerception()","flags":{"advanced-macros":{"runAsGM":false},"core":{"sourceId":"Macro.Fkh0cnLLfRJ91nzd"}},"_stats":{"systemId":"pf2e","systemVersion":"4.3.4","coreVersion":"10.290","createdTime":1668390683705,"modifiedTime":1668460014358,"lastModifiedBy":"eYRcJxNtWBHDBCJ8"},"folder":null,"sort":0,"ownership":{"default":0,"mdv0NOLsITdkCYRq":3},"_id":"nkMKFUHzwA74zBO3"}
{"name":"Group Perception","type":"script","author":"mdv0NOLsITdkCYRq","img":"systems/pf2e/icons/spells/vision-of-weakness.webp","scope":"global","command":"/**\n * @param {number} rank\n */\nfunction skillRankToProficiency(rank) {\n    switch (rank) {\n        case 1:\n            return 'trained'\n        case 2:\n            return 'expert'\n        case 3:\n            return 'master'\n        case 4:\n            return 'legendary'\n        default:\n            return 'untrained'\n    }\n}\n\n/** @param {Token} token */\nfunction rollPerception(token) {\n    const perception = token.actor.attributes.perception\n    const mod = perception.value\n    const rank = skillRankToProficiency(perception.rank)\n    const roll = new Roll('1d20 + @mod', { mod }).evaluate({ async: false })\n    const die = roll.dice[0].total\n    let result = `<div style=\"display:flex;justify-content:space-between;\"><span>${token.actor.name} (${rank})</span><span`\n    if (die == 20) result += ' style=\"color: green;\"'\n    else if (die == 1) result += ' style=\"color: red;\"'\n    return `${result}>${roll.total}</span></div>`\n}\n\nfunction groupPerception() {\n    let result = '<hr>'\n    canvas.tokens.placeables.filter(x => x.actor && x.actor.hasPlayerOwner && token.actor.attributes.perception).forEach(token => (result += rollPerception(token)))\n    ChatMessage.create({ content: result, flavor: 'Group Perception Checks', whisper: [game.user.id] })\n}\n\ngroupPerception()","flags":{"advanced-macros":{"runAsGM":false},"core":{"sourceId":"Macro.Fkh0cnLLfRJ91nzd"}},"_stats":{"systemId":"pf2e","systemVersion":"4.3.4","coreVersion":"10.290","createdTime":1668390683705,"modifiedTime":1668460370634,"lastModifiedBy":"eYRcJxNtWBHDBCJ8"},"folder":null,"sort":0,"ownership":{"default":0,"mdv0NOLsITdkCYRq":3},"_id":"nkMKFUHzwA74zBO3"}
{"name":"Group Perception","type":"script","author":"mdv0NOLsITdkCYRq","img":"systems/pf2e/icons/spells/vision-of-weakness.webp","scope":"global","command":"/**\n * @param {number} rank\n */\nfunction skillRankToProficiency(rank) {\n    switch (rank) {\n        case 1:\n            return 'trained'\n        case 2:\n            return 'expert'\n        case 3:\n            return 'master'\n        case 4:\n            return 'legendary'\n        default:\n            return 'untrained'\n    }\n}\n\n/** @param {Token} token */\nfunction rollPerception(token) {\n    const perception = token.actor.attributes.perception\n    const mod = perception.value\n    const rank = skillRankToProficiency(perception.rank)\n    const roll = new Roll('1d20 + @mod', { mod }).evaluate({ async: false })\n    const die = roll.dice[0].total\n    let result = `<div style=\"display:flex;justify-content:space-between;\"><span>${token.actor.name} (${rank})</span><span`\n    if (die == 20) result += ' style=\"color: green;\"'\n    else if (die == 1) result += ' style=\"color: red;\"'\n    return `${result}>${roll.total}</span></div>`\n}\n\nfunction groupPerception() {\n    let result = '<hr>'\n    canvas.tokens.placeables.filter(x => x.actor && x.actor.hasPlayerOwner && x.actor.attributes.perception).forEach(token => (result += rollPerception(token)))\n    ChatMessage.create({ content: result, flavor: 'Group Perception Checks', whisper: [game.user.id] })\n}\n\ngroupPerception()","flags":{"advanced-macros":{"runAsGM":false},"core":{"sourceId":"Macro.Fkh0cnLLfRJ91nzd"}},"_stats":{"systemId":"pf2e","systemVersion":"4.3.4","coreVersion":"10.290","createdTime":1668390683705,"modifiedTime":1668460645037,"lastModifiedBy":"eYRcJxNtWBHDBCJ8"},"folder":null,"sort":0,"ownership":{"default":0,"mdv0NOLsITdkCYRq":3},"_id":"nkMKFUHzwA74zBO3"}
