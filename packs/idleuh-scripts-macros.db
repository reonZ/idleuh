{"name":"image-to-chat","type":"script","author":"mdv0NOLsITdkCYRq","img":"icons/svg/dice-target.svg","scope":"global","command":"let uri = args[0];\nif (!uri) {\n  ui.notifications.error('Need 1 argument for image uri.');\n  return;\n}\n\nuri = `worlds/tg-corsaire-the-3rd/images/${uri}`;\nChatMessage.create({content:`<img src=\"${uri}\" />`});","flags":{"advanced-macros":{"runAsGM":false},"core":{"sourceId":"Macro.x7VtSJhQ2x6pAELl"}},"_stats":{"systemId":"pf2e","systemVersion":"4.3.4","coreVersion":"10.290","createdTime":1668390760582,"modifiedTime":1668390760582,"lastModifiedBy":"mdv0NOLsITdkCYRq"},"folder":null,"sort":0,"ownership":{"default":0,"mdv0NOLsITdkCYRq":3},"_id":"eE0Ydyql52RhfLu5"}
{"name":"lockpicking","type":"script","author":"mdv0NOLsITdkCYRq","img":"icons/svg/dice-target.svg","scope":"global","command":"const data = event.currentTarget.dataset\nconst dc = Number(data.dc) ?? 15\nconst nb = Number(data.nb) ?? 1\n\nif (typeof dc !== 'number' || isNaN(dc)) {\n    ui.notifications.error('First argument \"DC\" must be a number')\n    return\n}\n\nif (typeof nb !== 'number' || isNaN(dc)) {\n    ui.notifications.error('Second argument \"Number of repeats\" must be a number')\n    return\n}\n\nconst id = data.actor\nconst actor = canvas.tokens.controlled[0]?.actor ?? game.user.character\n\nif (!actor) {\n    ui.notifications.warn('You must select an actor.')\n    return\n}\n\nif (id && actor.id !== id) {\n    ui.notifications.warn('This action was not required for this actor.')\n    return\n}\n\nconst skill = actor.system.skills.thi\nconst modifiers = new game.pf2e.CheckModifier('', skill)\nconst options = {\n    actor,\n    type: 'skill-check',\n    createMessage: false,\n    skipDialog: true,\n}\n\nconst successTier = {\n    CRITICAL_FAILURE: 0,\n    FAILURE: 1,\n    SUCCESS: 2,\n    CRITICAL_SUCCESS: 3,\n}\n\nasync function Roll() {\n    const roll = await game.pf2e.Check.roll(modifiers, options)\n    const total = roll.total\n    const die = roll.dice[0].total\n    const tooltip = ''\n\n    let tier\n\n    if (total >= dc + 10) tier = successTier.CRITICAL_SUCCESS\n    else if (total <= dc - 10) tier = successTier.CRITICAL_FAILURE\n    else if (total < dc) tier = successTier.FAILURE\n    else tier = successTier.SUCCESS\n\n    if (die === 20) tier++\n    else if (die === 1) tier--\n\n    if (tier < successTier.CRITICAL_FAILURE) tier = successTier.CRITICAL_FAILURE\n    else if (tier > successTier.CRITICAL_SUCCESS) tier = successTier.CRITICAL_SUCCESS\n\n    return {\n        get isFumble() {\n            return die === 1\n        },\n\n        get isCritFail() {\n            return tier === successTier.CRITICAL_FAILURE\n        },\n\n        get isSuccess() {\n            return tier >= successTier.SUCCESS\n        },\n\n        get isCritical() {\n            return die === 20\n        },\n\n        get total() {\n            return total\n        },\n\n        get color() {\n            return this.isFumble ? 'red' : this.isCritical ? 'green' : 'inherited'\n        },\n\n        get text() {\n            return `<span style=\"color: ${this.color};\" title=\"${tooltip}\">${total}</span>`\n        },\n    }\n}\n\n/** @typedef {Awaited<ReturnType<Roll>>} RollResult */\n\nfunction getSpeaker() {\n    return ChatMessage.getSpeaker({ actor })\n}\n\n/**\n * @param {RollResult[]} rolls\n * @param {boolean} failed\n */\nfunction messageContent(rolls, failed) {\n    let msg = 'Attempts: '\n    msg += rolls.map(x => x.text).join(' ')\n    msg += '<hr>'\n    if (failed) msg += '<strong>Failure</strong> You break your pick in the process.'\n    else msg += '<strong>Success</strong> You successfully open the lock.'\n    return msg\n}\n\nfunction messageFlavor() {\n    const thi = game.i18n.localize('PF2E.SkillThi')\n    const check = game.i18n.localize('PF2E.Check.Label')\n    const action = game.i18n.localize('PF2E.Actions.PickALock.Title')\n    const manipulate = game.i18n.localize('PF2E.TraitManipulate')\n    const tags = skill.breakdown.split(',')\n\n    return `<h4 class=\"action\">\n    <span class=\"pf2-icon\">D</span> <b>${action}</b> <p class=\"compact-text\">(${thi} ${check})</p>\n</h4>\n<div class=\"tags\">\n    <span class=\"tag tooltipstered\" data-slug=\"manipulate\" data-description=\"PF2E.TraitDescriptionManipulate\">\n        ${manipulate}\n    </span>\n</div>\n<hr>\n<div class=\"tags\">\n    ${skill.breakdown\n        .split(',')\n        .map(x => `<span class=\"tag tag_transparent\" data-slug=\"dex\">${x.trim()}</span>`)\n        .join('')}\n</div>`\n}\n\nasync function run() {\n    const attempts = []\n    let success = 0\n    let failed = false\n\n    while (!failed && success < nb) {\n        const attempt = await Roll()\n        attempts.push(attempt)\n        if (attempt.isCritical) success = success + 2\n        else if (attempt.isSuccess) success = success + 1\n        else if (attempt.isCritFail) failed = true\n    }\n\n    ChatMessage.create({ speaker: getSpeaker(), flavor: messageFlavor(), content: messageContent(attempts, failed) })\n}\n\nrun()","flags":{"advanced-macros":{"runAsGM":false},"core":{"sourceId":"Macro.gFpassQ4wPV0t2ql"}},"_stats":{"systemId":"pf2e","systemVersion":"4.3.4","coreVersion":"10.290","createdTime":1666862076038,"modifiedTime":1668390761498,"lastModifiedBy":"mdv0NOLsITdkCYRq"},"folder":null,"sort":0,"ownership":{"default":0,"mdv0NOLsITdkCYRq":3},"_id":"hHaovnFb3iLxwdvx"}
